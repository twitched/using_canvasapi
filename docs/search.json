[
  {
    "objectID": "using_canvasapi.html",
    "href": "using_canvasapi.html",
    "title": "Using the Canvas API",
    "section": "",
    "text": "One important feature of Canvas is its API. In fact, the Canvas LMS as we use it is built on its API. Everything a user does in either Canvas‚Äô web interface or the mobile apps goes through the API. This architecture allows every user to use the API to do anything they could do in the browser or mobile app plus more in a program.\nThis guide shows how to use Python and a library created by the University of Central Florida to create scripts that use the API."
  },
  {
    "objectID": "using_canvasapi.html#getting-started",
    "href": "using_canvasapi.html#getting-started",
    "title": "Using the Canvas API",
    "section": "Getting Started",
    "text": "Getting Started\n\nGetting an Access Token\nTo get direct access to the API you need an access token that acts like a password. You can get the key from your user. As shown below, go to your users settings and click on New Access Token.\n\n\n\nGetting an access token\n\n\nThe Purpose field can have anything you want, but it is good to choose something that will help you remember why you created it. If you are doing this for learning, I suggest ‚ÄúLearning the Canvas API‚Äù.\nExpiration: You should have your token expire in case you don‚Äôt use it again. If you are doing this for learning, have the token expire soon. You can create another at anytime. You can create more than one at a time if you want.\n\n\n\n\n\n\nWarning\n\n\n\nThis access token is just as good as your username and password. Plus, it doesn‚Äôt require Duo! Treat it with extreme caution. Anyone with it can log into Canvas as you.\n\n\nCopy the token to a safe place like a password manager or a temporary document on your desktop so that you can delete it later. As the dialog says, it will only show it one time. If you close the dialog before copying the token or copy it incorrectly. Delete that token (üóë) and create another.\n\n\nInstall Python\nIf you already have Python 3.9 or greater installed, and you can run python from the command line, you can skip this section.\n\n\n\n\n\n\nNote\n\n\n\nThese instructions are for Windows. If you are using MacOS or Linux, I suggest using your favorite package manager (like brew for MacOS) to install Python.\n\n\nIf not, do the following:\n\nGo to https://python.org, go to Downloads and choose to download the Latest Python 3 Release. At the time of this writing, the latest is 3.10.8. It might be higher now.\nDouble click on the installer file to start the install\nCheck the box that says Add python.exe to PATH\nChoose Install Now to complete the rest of the install\n\nCheck to see if it worked by\n\nRight-clicking on the start menu button and choosing Windows PowerShell\nAt the prompt type python --version and press enter\n\nIt should show the version of python. This shows that you installed correctly. If it doesn‚Äôt work, uninstall python and reinstall it making sure you follow the instructions above.\n\n\n\n\n\n\nNote\n\n\n\nSince we will be doing a lot on the command line I suggest installing and using the Windows Terminal. It does a lot of things better than the standard command line through Powershell or cmd.\n\n\n\n\nInstall Needed Packages\nNow that Python is installed and we can run it from the command line, we are ready to install the Python packages we need to use the Canvas API.\n\nOpen the command line (either Windows Terminal, if you installed it, or Windows PowerShell)\nEnter the following:\n\npip install canvasapi keyring\n\n\nStore your API token securely\nWe can use the keyring package we just installed to store your Canvas API token securely and where we can retrieve it later:\nkeyring set canvas token\nIt will then ask you for your ‚Äúpassword‚Äù, which is the token you copied from canvas earlier. You will need to paste it here.\nTo check to see if it worked, issue the command with a ‚Äúget‚Äù in place of the ‚Äúset‚Äù:\nkeyring get canvas token\n\n\nHave a Text Editor Ready\nYou‚Äôll need a text editor for writing your code Windows‚Äô Notepad won‚Äôt work. If you don‚Äôt already have one installed, I suggest Notepad++."
  },
  {
    "objectID": "using_canvasapi.html#canvas-api-hello-world",
    "href": "using_canvasapi.html#canvas-api-hello-world",
    "title": "Using the Canvas API",
    "section": "Canvas API Hello World",
    "text": "Canvas API Hello World\nLet‚Äôs do some interacting with the Canvas API. Open your editor and copy and paste the following code:\nimport keyring\nfrom canvasapi import Canvas\n\n############ Variables ################\ncourse_id = '12017' #Change this to your course id\ncanvas_url = 'https://boisestatecanvas.instructure.com'\n########################################\n\ndef main():\n    # Get your Canvas API Token from the keyring\n    token = keyring.get_password('canvas', 'token')\n    # Get a canvas object\n    canvas = Canvas(canvas_url, token)\n    # Get a canvas object\n    canvas = Canvas(canvas_url, token)\n    # Get the course you are interested in\n    course = canvas.get_course(course_id)\n    \n    ##### Here's where we do whatever we want with our course #####\n    \n    # let's list all the assignments\n    # see https://canvasapi.readthedocs.io/en/stable/course-ref.html#canvasapi.course.Course.get_assignments\n    # and see https://canvasapi.readthedocs.io/en/stable/examples.html#assignments\n    assignments = course.get_assignments()\n    for assignment in assignments:\n        print(f'{assignment.name}, {assignment.due_at}')\n\nif __name__ == '__main__':\n    main()\nChange the course_id variable to one of your courses. The number is in the Canvas URL. For example if the URL for your course is https://boisestatecanvas.instructure.com/courses/12017, then the course id is 12017.\nYou can now play with the API.\nThe API documentation for the python interface created by the University of Central Florida can be found here: https://canvasapi.readthedocs.io.\nThe Canvas REST API documentation, where you can find all of the variable names is here: https://canvas.instructure.com/doc/api/"
  },
  {
    "objectID": "using_canvasapi.html#how-to-use-my-scripts",
    "href": "using_canvasapi.html#how-to-use-my-scripts",
    "title": "Using the Canvas API",
    "section": "How to use my scripts",
    "text": "How to use my scripts\nI have already created a bunch of scripts (here‚Äôs the github repository). Unfortunately I didn‚Äôt make them as easy to use as the script above. There are two ways you can use them\n\nDownload and use them as they are\nCopy and paste code from my scripts\n\n\nDownload and use my scripts\n\nDonwload the scripts as a zip file\nUnzip them into an appropriate folder\nEnter the canvas url into the keyring\n\nkeyring set canvas url https://boisestatecanvas.instructure.com\n\nInside the directory where you unzipped the scripts you can run them like this:\n\npython list_my_courses.py\nThis will give you command-line options you can use with the script\n\n\nCopy and Paste\nYou can also look at the code for my scripts and copy and paste the code in place of everything below ##### Here's where we do whatever we want with our course #####. This takes some understanding of what my code is doing since you will have to replace variables I obtain from the command line with your own variable or value."
  },
  {
    "objectID": "using_canvasapi.html#other-canvas-api-interfaces",
    "href": "using_canvasapi.html#other-canvas-api-interfaces",
    "title": "Using the Canvas API",
    "section": "Other Canvas API Interfaces",
    "text": "Other Canvas API Interfaces\nYou might wonder if there are Canvas API interfaces in your own favorite language. Here are a few:\n\nR: rcanvas\nNode.js: node-canvas-api\nJava: canvas-api\nRuby: [lms_api])(https://github.com/atomicjolt/lms_api)\n\nFinally, James Jones is very active in using the API and using javascript browser plugins to make canvas work easier. Here‚Äôs a list of some of his work. A repository of even more scripts he‚Äôs made can be found here: https://github.com/jamesjonesmath/canvancement"
  }
]